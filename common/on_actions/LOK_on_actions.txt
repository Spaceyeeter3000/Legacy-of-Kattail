on_actions = {
	on_startup = {
		effect = {
			every_possible_country = {
				set_rule = { can_puppet = no } #Handled by decision
				#Stab & WS stab hit from having noncore states, calculated weekly
				set_variable = { stab_from_noncore = 0 }
				set_variable = { ws_from_noncore = 0 }
				add_dynamic_modifier = { modifier = lok_noncore_stab_ws_impact }
				set_variable = { country_food_stockpile = 0 } #Food stockpiles
				set_variable = { country_food_stockpile_max = 0 } #Food stockpile max
				set_variable = { construction_repeatable_buff = 0 }
				add_dynamic_modifier = { modifier = LOK_food_consumption_modifier }
				add_dynamic_modifier = { modifier = LOK_extra_resources_modifier }
				add_ideas = LOK_base_modifier_definitions
			}

			#Casualty counters
			set_variable = { global.lok_global_deaths = 0 } #Sum of ALL combat-deaths for ALL countries

			set_variable = { global.lok_global_combat_deaths = 0 } #Sum of ALL combatt deaths for ALL countries
			set_variable = { global.lok_global_bombing_deaths = 0 } #Sum of ALL bombing deaths for ALL countries
			set_variable = { global.lok_global_starvation_deaths = 0 } #Sum of ALL starvation deaths for ALL countries
			set_variable = { global.lok_global_radiation_deaths = 0 } #Sum of ALL radiation deaths for ALL countries

			set_variable = { global.lok_global_deaths_display = 0 }

			every_possible_country = {
				set_variable = { lok_country_deaths = 0 } #total

				set_variable = { lok_country_combat_deaths = 0 } #war deaths
				set_variable = { lok_country_bombing_deaths = 0 } #Nuke/bomb deaths
				set_variable = { lok_country_starvation_deaths = 0 } #Starvation deaths
				set_variable = { lok_country_radiation_deaths = 0 } #Radiation deaths

				set_variable = { lok_country_deaths_display = 0 }
			}

			every_state = {
				set_variable = { lok_state_deaths = 0 }

				set_variable = { lok_state_bombing_deaths = 0 }
				set_variable = { lok_state_starvation_deaths = 0 }
				set_variable = { lok_state_radiation_deaths = 0 }
				set_variable = { lok_state_combat_deaths = 0 }

				set_variable = { lok_state_deaths_display = 0 }

				set_variable = { lok_radiation_level = 0 } #Radiation from nukes

				set_variable = { lok_min_manpower_before_collapse = state_population_k } #Determine the population before the state collapses into anarchy
				divide_variable = { lok_min_manpower_before_collapse = 20 } #If 50k people are left out of 1M then stuff collapses.
			
				#Radiation in state
				add_dynamic_modifier = { modifier = lok_radiation_state_modifier }
				calculate_radiation_state_modifiers = yes
			}

			#Setup the Herzlands state array to track unification
			global = { set_variable = { total_herzlands_state_count = 0 } }  #<---- error log doesnt like this?
			every_state = {
				limit = { CONTROLLER = { is_herzlands_warlord = yes } }
				add_to_array = { global.herzlands_states_array = THIS }
			}

			#The treshold before unification is reached
			set_variable = { global.herzlands_unification_state_prereq = global.herzlands_states_array^num }
			multiply_variable = { global.herzlands_unification_state_prereq = 0.75 } #Let's go with 75% for now.
			round_variable = global.herzlands_unification_state_prereq

			#See how many states every Herzlands country has, add to their own counter
			every_country = {
				limit = { is_herzlands_warlord = yes }
				set_variable = { current_herzlands_state_count = num_owned_states }
			}

			#Wonders
			#Katown Pyramid
			509 = {
				set_variable = { wonder = 1 }

				#We store the modifier values in an array
				# add_to_array = { array = wonder_modifiers_values value = 0.15 }
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}
			#Lionsburg Riesigerwerks
			173 = {
				set_variable = { wonder = 2 }

				#We store the modifier values in an array
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
				# add_to_array = { array = wonder_modifiers_values value = -0.50 }
			}
			#Great Shipyards of Auralia
			116 = {
				set_variable = { wonder = 3 }

				#We store the modifier values in an array
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}
			#Himezulte Airbase
			220 = {
				set_variable = { wonder = 4 }

				#We store the modifier values in an array
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
				# add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}

			192 = { set_variable = { wonder = 5 } } #Lionsburg Exchange
			595 = { set_variable = { wonder = 6 } } #Meon-U
			13 = { set_variable = { wonder = 7 } } #Lorishaus
			477 = { set_variable = { wonder = 8 } } #Frankfurr Institute
			535 = { set_variable = { wonder = 9 } } #Big hole in neu-tailsbaden
			486 = { set_variable = { wonder = 10 } } #Stronien Hub
			583 = { set_variable = { wonder = 11 } } #Punchiestadt Orchards

			#Setup species
			every_state = { set_variable = { species = 0 } }
			every_state = { set_variable = { minority = 1000 } }

			#Katown
			KTW = { every_owned_state = { set_variable = { species = 1 } } }

			#Purrlin-Lionsburg
           	PRL = { every_owned_state = { set_variable = { species = 1 } } }
			514 = { set_variable = { minority = 3 } }
			512 = { set_variable = { minority = 3 } }
			191 = { set_variable = { minority = 3 } }
			192 = { set_variable = { minority = 9 } } #Macaquians in Purrlin

			#Katsilbershirts
			SIL = { every_owned_state = { set_variable = { species = 1 } } }
			653 = { set_variable = { minority = 11 } } #The Diasporat

			#Clermeowth
           	CLE = { every_owned_state = { set_variable = { species = 1 } } }
			583 = { set_variable = { minority = 11 } } #The Diasporat
			66 = { set_variable = { minority = 11 } } #The Diasporat

           	PAW = { every_owned_state = { set_variable = { species = 1 } } }
           	FRA = { every_owned_state = { set_variable = { species = 1 } } }
           	SOB = { every_owned_state = { set_variable = { species = 1 } } }
           	HYP = { every_owned_state = { set_variable = { species = 1 } } }
           	NEU = { every_owned_state = { set_variable = { species = 1 } } }

			#Navy Remnants
           	NAV = { every_owned_state = { set_variable = { species = 1 } } }
			32 = { set_variable = { minority = 4 } }

           	TAI = { every_owned_state = { set_variable = { species = 1 } } }
           	NKB = { every_owned_state = { set_variable = { species = 1 } } }
           	ELO = { every_owned_state = { set_variable = { species = 1 } } }
           	AUR = { every_owned_state = { set_variable = { species = 1 } } }
           	OST = { every_owned_state = { set_variable = { species = 1 } } }
			87 = { set_variable = { minority = 9 } } #Macaquians in Los Kibbles

           	WPR = { every_owned_state = { set_variable = { species = 1 } } }
           	CAT = { every_owned_state = { set_variable = { species = 1 } } }
           	LIO = { every_owned_state = { set_variable = { species = 1 } } }
           	MEW = { every_owned_state = { set_variable = { species = 1 } } }
           	STR = { every_owned_state = { set_variable = { species = 1 } } }
           	MEO = { every_owned_state = { set_variable = { species = 1 } } }
			595 = { set_variable = { minority = 7 } }
			197 = { set_variable = { minority = 7 } }
			593 = { set_variable = { minority = 3 } }
			594 = { set_variable = { minority = 3 } }

			#Quarries
           	PTQ = { every_owned_state = { set_variable = { species = 1 } } }
			37 = { set_variable = { minority = 4 } }
			54 = { set_variable = { minority = 4 } }
			566 = { set_variable = { minority = 4 } }
			567 = { set_variable = { minority = 4 } }
			568 = { set_variable = { minority = 4 } }

			#Frontier
           	IMF = { every_owned_state = { set_variable = { species = 1 } } }
           	IMF = { every_owned_state = { set_variable = { minority = 4 } } }

           	KPK = { every_owned_state = { set_variable = { species = 1 } } }
           	MEC = { every_owned_state = { set_variable = { species = 1 } } }
           	HIM = { every_owned_state = { set_variable = { species = 1 } } }

			#Pawldrin Island
			PLI = { every_owned_state = { set_variable = { species = 1 } } }

			#Sobakiland
			SOB = { every_owned_state = { set_variable = { species = 2 } } }
			471 = { set_variable = { species = 1 } }
			478 = { set_variable = { species = 1 } }
			626 = { set_variable = { species = 1 } }
			630 = { set_variable = { species = 1 } }
			471 = { set_variable = { minority = 2 } }
			478 = { set_variable = { minority = 2 } }
			626 = { set_variable = { minority = 2 } }
			630 = { set_variable = { minority = 2 } }

			476 = { set_variable = { minority = 1 } }
			472 = { set_variable = { minority = 1 } }
			28 = { set_variable = { minority = 1 } }
			483 = { set_variable = { minority = 1 } }
			629 = { set_variable = { minority = 1 } }
			632 = { set_variable = { minority = 1 } }
			631 = { set_variable = { minority = 1 } }
			642 = { set_variable = { minority = 1 } }
			643 = { set_variable = { minority = 1 } }
			472 = { set_variable = { minority = 1 } }
			490 = { set_variable = { minority = 1 } }
			473 = { set_variable = { minority = 1 } }

			#Meorseilles
			85 = { set_variable = { minority = 9 } }
			644 = { set_variable = { minority = 9 } }

			#Zuspris
			ZUS = { every_owned_state = { set_variable = { species = 4 } } }
			621 = { set_variable = { minority = 1 } }
			620 = { set_variable = { minority = 1 } }

			#Nekeox
			NKC = { every_owned_state = { set_variable = { species = 5 } } }
		
			#Nitromethane
			NMI = { every_owned_state = { set_variable = { species = 8 } } }
			NMI = { every_owned_state = { set_variable = { minority = 1 } } }

			#Wacegia
			WAC = { every_owned_state = { set_variable = { species = 6 } } }
			WAC = { every_owned_state = { set_variable = { minority = 1 } } }
			#They have Kronks
			619 = { set_variable = { minority = 7 } }
			618 = { set_variable = { minority = 7 } }
			124 = { set_variable = { minority = 7 } }
			123 = { set_variable = { species = 7 } }
			617 = { set_variable = { species = 7 } }
			123 = { set_variable = { minority = 6 } }
			617 = { set_variable = { minority = 6 } }
			#And some Brambles (fear)
			561 = { set_variable = { minority = 10 } }

			every_possible_country = {
				add_ideas = LOK_katzen_aggressive
				every_owned_state = { apply_state_species_modifier = yes } #Species modifiers
				apply_wonder_effects = yes
				if = {
					limit = { is_ai = yes }
					set_technology = { LOK_ai_food_tech = 1 }
					add_equipment_to_stockpile = {
				 		type = lok_debug_food_equipment_1
				 		amount = 1000000
				 	}
					country_event = { id = LOK_food.1 days = 2 }
				}
			}
        }
	}
	
	on_weekly = {
		effect = {
			if = {
				limit = { NOT = { has_dynamic_modifier = { modifier = LOK_food_consumption_modifier } } }
				add_dynamic_modifier = { modifier = LOK_food_consumption_modifier }
			}
			apply_wonder_effects = yes
			calculate_stab_ws_hit_from_noncore = yes
			calculate_combat_casualties = yes
			calculate_total_food_consumption = yes
			every_controlled_state = {
				calculate_radiation_in_state = yes #First calculate the radiation spread/fallout
				calculate_radiation_state_modifiers = yes #Then recalc the modifiers
				apply_radiation_effects = yes #Finally, apply casualties
				#Round the final displays
				set_variable = { lok_state_deaths_display = lok_state_deaths }
				round_variable = lok_state_deaths_display

				set_variable = { lok_state_combat_deaths_display = lok_state_combat_deaths }
				round_variable = lok_state_combat_deaths_display

				set_variable = { lok_state_radiation_deaths_display = lok_state_radiation_deaths }
				round_variable = lok_state_radiation_deaths_display

				set_variable = { lok_state_bombing_deaths_display = lok_state_bombing_deaths }
				round_variable = lok_state_bombing_deaths_display

				set_variable = { lok_state_starvation_deaths_display = lok_state_starvation_deaths }
				round_variable = lok_state_starvation_deaths_display

				if = { #State got so depopulated that it just collapses
					limit = { check_variable = { state_population_k < lok_min_manpower_before_collapse } }
					collapse_into_anarchy = yes
					set_variable = { lok_min_manpower_before_collapse = 0 }
				}
			}

			#Round the final displays for country
			set_variable = { lok_country_deaths_display = lok_country_deaths }
			round_variable = lok_country_deaths_display

			set_variable = { lok_country_radiation_deaths_display = lok_country_radiation_deaths }
			round_variable = lok_country_radiation_deaths_display

			set_variable = { lok_country_combat_deaths_display = lok_country_combat_deaths }
			round_variable = lok_country_combat_deaths_display

			set_variable = { lok_country_bombing_deaths_display = lok_country_bombing_deaths }
			round_variable = lok_country_bombing_deaths_display

			set_variable = { lok_country_starvation_deaths_display = lok_country_starvation_deaths }
			round_variable = lok_country_starvation_deaths_display

			#Round the final displays for global
			set_variable = { global.lok_global_deaths_display = global.lok_global_deaths }
			divide_variable = { global.lok_global_deaths_display = 1000 } #Turn to millions

			set_variable = { global.lok_global_radiation_deaths_display = global.lok_global_radiation_deaths }
			divide_variable = { global.lok_global_radiation_deaths_display = 1000 } #Turn to millions

			set_variable = { global.lok_global_combat_deaths_display = global.lok_global_combat_deaths }
			divide_variable = { global.lok_global_combat_deaths = 1000 } #Turn to millions

			set_variable = { global.lok_global_bombing_deaths_display = global.lok_global_bombing_deaths }
			divide_variable = { global.lok_global_bombing_deaths_display = 1000 } #Turn to millions

			set_variable = { global.lok_global_starvation_deaths_display = global.lok_global_starvation_deaths }
			divide_variable = { global.lok_global_starvation_deaths_display = 1000 } #Turn to millions


			force_update_map_mode = { mapmode = LOK_radiation_map_mode }
		}
	}

	on_state_control_changed = {
		effect = {
			ROOT = { apply_wonder_effects = yes }
			FROM = { apply_wonder_effects = yes }
			if = { #Count how many Herzlands state a Herzlands nation owns, update when territory changes.
				limit = { FROM.FROM = { is_in_array = { array = global.herzlands_states_array value = THIS } } }
				ROOT = { if = { limit = { is_herzlands_warlord = yes } add_to_variable = { current_herzlands_state_count = 1 } } }
				FROM = { if = { limit = { is_herzlands_warlord = yes } subtract_from_variable = { current_herzlands_state_count = 1 } } }
			}
		}
	}

	on_monthly = {
		effect = {
			force_update_map_mode = { mapmode = LOK_species_map_mode }
		}
	}

	on_daily = {
		effect = {
			every_country = { #Replacing the original script
				calculate_bonus_resources_from_modifiers = yes
			}
			if = { #DEBUG NUCLEAR WAR MODE - NATIONS WILL RANDOMLY FIRE NUKES AT THE STATES OF THEIR ENEMIES!
				limit = { has_global_flag = lok_nuclear_war_mode_on }
				random_state = {
					limit = { controller = { has_war_with = ROOT } }
					random = {
						chance = 50
						save_global_event_target_as = lok_thermonuclear_salvo_state
						ROOT = { fire_thermonuclear_salvo = yes }
					}
				}
			}
			# if = {
			# 	limit = { is_ai = yes }
			# 	#This is a dummy food-costing equipment to force the AI into buying food if it lacks it.
			# 	#Every day we check the AI's stockpile of the stuff. If there is a stockpile then it meant the AI produced some and the production line is still there. If not then it means the AI has deleted the line (because it's technically useless) and so we recreate the production line.
			# 	#Then we delete the stockpile.
			# 	if = {
			# 		limit = { NOT = { has_equipment = { lok_debug_food_equipment_1 > 0 } } }
			# 		add_equipment_production = {
			# 			equipment = { type = lok_debug_food_equipment_1 }
			# 			requested_factories = 1
			# 			progress = 1
			# 			efficiency = 100
			# 		}
			# 	}
			# 	add_equipment_to_stockpile = {
			# 		type = lok_debug_food_equipment_1
			# 		amount = -100000
			# 	}
			# }
		}
	}

	on_subject_free = {
		effect = {
			if = {
				limit = { original_tag = CLE }
				drop_cosmetic_tag = yes
			}
			if = {
				limit = { original_tag = PAW }
				drop_cosmetic_tag = yes
			}
		}
	}

	on_nuke_drop = {
		effect = {
			#Nukes take away 5% of a state's population. Calculate it and remove, then add to the total counters
			FROM = {
				set_variable = { lok_added_radiation_level = 1 }
				multiply_variable = { lok_added_radiation_level = ROOT.modifier@lok_nuke_radiation_factor } #take the modifier into account
				add_to_variable = { lok_radiation_level = lok_added_radiation_level } #Radiation level
				divide_variable = { lok_added_radiation_level = 4 }
				calculate_radiation_state_modifiers = yes
				every_neighbor_state = { #It spreads to neighboring states too, how fun!
					add_to_variable = { lok_radiation_level = PREV.lok_added_radiation_level }
					calculate_radiation_state_modifiers = yes
				}
				if = {
					limit = { state_population_k > 10 } #There'll always at least be like 10k bozos left
					set_temp_variable = { lok_nuke_casualties = state_population_k }
					multiply_temp_variable = { lok_nuke_casualties = 0.005 } #We divide to avoid hitting the limit of the for_loop effect
					round_temp_variable = lok_nuke_casualties
					clamp_temp_variable = { var = lok_nuke_casualties min = 1 } #At least 10k people gotta die sowwy
					for_loop_effect = {
						end = lok_nuke_casualties
						add_manpower = -10000
					}
					multiply_temp_variable = { lok_nuke_casualties = 10 } #Turn to thousands (if that's even possible)
					set_variable = { lok_recent_nuke_casualties = lok_nuke_casualties }
					#Add to the state counters
					add_to_variable = { lok_state_bombing_deaths = lok_recent_nuke_casualties }
					add_to_variable = { lok_state_deaths = lok_recent_nuke_casualties }
					add_to_variable = { lok_state_deaths_display = lok_recent_nuke_casualties }
					#Add these deaths to the controller's total and the grand total
					CONTROLLER = {
						add_to_variable = { lok_country_bombing_deaths = PREV.lok_recent_nuke_casualties }
						add_to_variable = { lok_country_deaths = PREV.lok_recent_nuke_casualties }
						add_to_variable = { global.lok_global_bombing_deaths = PREV.lok_recent_nuke_casualties }
						add_to_variable = { global.lok_global_deaths = PREV.lok_recent_nuke_casualties }
					}
				}
			}
			#Radiation mapmode
			force_update_map_mode = { mapmode = LOK_radiation_map_mode }
		}
	}
}
on_actions = {
	on_startup = {
		effect = {
			random_list = { #just pick a random southerner for USSF
				1 = { CAT = { set_country_flag = will_form_ussf } }
				1 = { LIO = { set_country_flag = will_form_ussf } }
				1 = { MEO = { set_country_flag = will_form_ussf } }
				1 = { PRL = { set_country_flag = will_form_ussf } }
			}
			every_possible_country = {
				set_rule = { can_puppet = no } #Handled by decision
				set_rule = { can_create_factions = no }
				set_rule = { can_join_factions = no }
				#Stab & WS stab hit from having noncore states, calculated weekly
				set_variable = { stab_from_noncore = 0 }
				set_variable = { ws_from_noncore = 0 }
				add_dynamic_modifier = { modifier = lok_noncore_stab_ws_impact }
				set_variable = { country_food_stockpile = 0 } #Food stockpiles
				set_variable = { country_food_stockpile_max = 0 } #Food stockpile max
				set_variable = { construction_repeatable_buff = 0 }
				add_dynamic_modifier = { modifier = LOK_food_consumption_modifier }
				add_dynamic_modifier = { modifier = LOK_extra_resources_modifier }
				add_ideas = LOK_base_modifier_definitions
				set_variable = { nuke_launch_count = 0 } #how many nukes are launched at once
				set_variable = { current_nuke_type = 0 } #the current selected type of nuke

				every_core_state = {
					ROOT = { add_to_array = { cores_at_game_start = PREV } }
				}
			}

			#Casualty counters
			set_variable = { global.lok_global_deaths = 0 } #Sum of ALL combat-deaths for ALL countries

			set_variable = { global.lok_global_combat_deaths = 0 } #Sum of ALL combatt deaths for ALL countries
			set_variable = { global.lok_global_bombing_deaths = 0 } #Sum of ALL bombing deaths for ALL countries
			set_variable = { global.lok_global_starvation_deaths = 0 } #Sum of ALL starvation deaths for ALL countries
			set_variable = { global.lok_global_radiation_deaths = 0 } #Sum of ALL radiation deaths for ALL countries

			set_variable = { global.lok_global_deaths_display = 0 }

			every_possible_country = {
				set_variable = { lok_country_deaths = 0 } #total

				set_variable = { lok_country_combat_deaths = 0 } #war deaths
				set_variable = { lok_country_bombing_deaths = 0 } #Nuke/bomb deaths
				set_variable = { lok_country_starvation_deaths = 0 } #Starvation deaths
				set_variable = { lok_country_radiation_deaths = 0 } #Radiation deaths

				set_variable = { lok_country_deaths_display = 0 }
			}

			every_state = {
				set_variable = { lok_state_deaths = 0 }

				set_variable = { lok_state_bombing_deaths = 0 }
				set_variable = { lok_state_starvation_deaths = 0 }
				set_variable = { lok_state_radiation_deaths = 0 }
				set_variable = { lok_state_combat_deaths = 0 }

				set_variable = { lok_state_deaths_display = 0 }

				set_variable = { lok_radiation_level = 0 } #Radiation from nukes

				set_variable = { lok_min_manpower_before_collapse = state_population_k } #Determine the population before the state collapses into anarchy
				divide_variable = { lok_min_manpower_before_collapse = 20 } #If 50k people are left out of 1M then stuff collapses.
			
				#Radiation in state
				add_dynamic_modifier = { modifier = lok_radiation_state_modifier }
				calculate_radiation_state_modifiers = yes
			}

			#Setup the Herzlands state array to track unification
			global = { set_variable = { total_herzlands_state_count = 0 } }  #<---- error log doesnt like this?
			every_country = {
				limit = { is_herzlands_warlord = yes }
				every_owned_state = { add_to_array = { global.herzlands_states_array = THIS } }
			}

			#The treshold before unification is reached
			set_variable = { global.herzlands_unification_state_prereq = global.herzlands_states_array^num }
			multiply_variable = { global.herzlands_unification_state_prereq = 0.75 } #Let's go with 75% for now.
			round_variable = global.herzlands_unification_state_prereq

			#See how many states every Herzlands country has, add to their own counter
			every_country = {
				limit = { is_herzlands_warlord = yes }
				set_variable = { current_herzlands_state_count = num_owned_states }
			}

			#DEFINING WONDERS
			#Katown Pyramid
			509 = {
				set_variable = { wonder = 1 }

				#We store the modifier values in an array
				add_to_array = { array = wonder_modifiers_values value = 0.15 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}
			#Lionsburg Riesigerwerks
			173 = {
				set_variable = { wonder = 2 }

				#We store the modifier values in an array
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = -0.50 }
			}
			#Great Shipyards of Auralia
			116 = {
				set_variable = { wonder = 3 }

				#We store the modifier values in an array
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}
			#Himezulte Airbase
			220 = {
				set_variable = { wonder = 4 }

				#We store the modifier values in an array
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}

			192 = { #Purrlin Exchange
				set_variable = { wonder = 5 }

				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = -0.10 }
			} 
			595 = { #Meon-U
				set_variable = { wonder = 6 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
			} 
			13 = { #Lorishaus
				set_variable = { wonder = 7 }

				add_to_array = { array = wonder_modifiers_values value = 0.05 }
				add_to_array = { array = wonder_modifiers_values value = 0.01 }
			}
			477 = { #Frankfurr Institute
				set_variable = { wonder = 8 }

				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}
			84 = { #Big hole in neu-tailsbaden
				set_variable = { wonder = 9 }

				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.025 }
				add_to_array = { array = wonder_modifiers_values value = -250 }
			}
			486 = { #Stronien Hub
				set_variable = { wonder = 10 }

				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
			}
			583 = { #Punchiestadt Orchards
				set_variable = { wonder = 11 }

				add_to_array = { array = wonder_modifiers_values value = 100 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = -0.05 }
			}

			644 = { #Karentz
				set_variable = { wonder = 12 }

				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 5 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.20 }
				add_to_array = { array = wonder_modifiers_values value = -0.50 }
			}

			131 = { #Pharmaceutical
				set_variable = { wonder = 13 }

				add_to_array = { array = wonder_modifiers_values value = 0.20 }
				add_to_array = { array = wonder_modifiers_values value = 0.10 }
				add_to_array = { array = wonder_modifiers_values value = 0.05 }
			}

			602 = { #Unterkatzens
				set_variable = { wonder = 14 }

				add_to_array = { array = wonder_modifiers_values value = 0.05 }
				add_to_array = { array = wonder_modifiers_values value = -0.10 }
				add_to_array = { array = wonder_modifiers_values value = -0.05 }
				add_to_array = { array = wonder_modifiers_values value = -0.10 }
			}

			#RESOURCES
			MUN = {
				every_owned_state = {
					limit = { impassable = no }
					set_variable = { stratres = 1 }
					random_list = {
						2 = { set_variable = { stratres_count = 1 } }
						1 = { set_variable = { stratres_count = 2 } }
					}
				}
			}
			
			142 = { set_variable = { stratres = 2 } set_variable = { stratres_count = 3 } }
			173 = { set_variable = { stratres = 2 } set_variable = { stratres_count = 1 } }

			#Setup species
			every_state = { set_variable = { species = 0 } }
			every_state = { set_variable = { minority = 1000 } }

			#Nekaston
			NEK = { every_owned_state = { set_variable = { species = 14 } } }

			#Big Bnuuy
			PLR = { every_owned_state = { set_variable = { species = 15 } } }
			HAR = { every_owned_state = { set_variable = { species = 15 } } }
			KAR = { every_owned_state = { set_variable = { species = 15 } } }

			#Solaria
			SLR = { every_owned_state = { set_variable = { species = 17 } } }
			821 = { set_variable = { minority = 3 } }

			#Kepler
			KEP = { every_owned_state = { set_variable = { species = 16 } } }
			426 = { set_variable = { minority = 1 } }
			803 = { set_variable = { minority = 1 } }
			396 = { set_variable = { minority = 9 } }

			#Talsanar
			TAL = { every_owned_state = { set_variable = { species = 18 } } }
			
			#Roqualia
			ROQ = { every_owned_state = { set_variable = { species = 3 } } }
			#meowmeowmeow
			320 = { set_variable = { minority = 1 } }
			742 = { set_variable = { minority = 1 } }
			293 = { set_variable = { minority = 1 } }
			258 = { set_variable = { minority = 1 } }
			719 = { set_variable = { minority = 1 } }
			741 = { set_variable = { minority = 1 } }
			743 = { set_variable = { minority = 1 } }
			278 = { set_variable = { minority = 1 } }
			314 = { set_variable = { minority = 1 } }
			276 = { set_variable = { minority = 1 } }
			307 = { set_variable = { minority = 1 } }
			296 = { set_variable = { minority = 1 } }
			718 = { set_variable = { minority = 1 } }
			303 = { set_variable = { minority = 1 } }
			#gamer monkes
			718 = { set_variable = { minority = 9 } }
			736 = { set_variable = { minority = 9 } }
			285 = { set_variable = { minority = 9 } }
			292 = { set_variable = { minority = 9 } }
			737 = { set_variable = { minority = 9 } }
			295 = { set_variable = { minority = 9 } }
			
			LMB = { every_owned_state = { set_variable = { species = 3 } } }
			LMB = { every_owned_state = { set_variable = { minority = 1 } } }

			RQA = { every_owned_state = { set_variable = { species = 1 } } }
			RQA = { every_owned_state = { set_variable = { minority = 3 } } }

			TAK = { every_owned_state = { set_variable = { species = 3 } } }
			PER = { every_owned_state = { set_variable = { species = 3 } } }
			732 = { set_variable = { minority = 9 } }
			323 = { set_variable = { minority = 9 } }
			731 = { set_variable = { minority = 9 } }
			733 = { set_variable = { minority = 9 } }
			321 = { set_variable = { minority = 1 } }
			734 = { set_variable = { minority = 1 } }
			332 = { set_variable = { minority = 1 } }


			#FSR
			FSR = { every_owned_state = { set_variable = { species = 1 } } }
			FSR = { every_owned_state = { set_variable = { minority = 3 } } }

			#DOM
			DOM = { every_owned_state = { set_variable = { species = 1 } } }
			242 = { set_variable = { minority = 13 } }
			244 = { set_variable = { minority = 13 } }

			#MCF
			MCF = { every_owned_state = { set_variable = { species = 13 } } }

			#Kusnurk
			KUS = { every_owned_state = { set_variable = { species = 12 } } }
			KUS = { every_owned_state = { set_variable = { minority = 1 } } } #Meow
			213 = { set_variable = { species = 1 } }
			213 = { set_variable = { minority = 12 } }

			#Katown
			KTW = { every_owned_state = { set_variable = { species = 1 } } }

			#Purrlin-Lionsburg
           	PRL = { every_owned_state = { set_variable = { species = 1 } } }
			514 = { set_variable = { minority = 3 } }
			512 = { set_variable = { minority = 3 } }
			191 = { set_variable = { minority = 3 } }
			192 = { set_variable = { minority = 9 } } #Macaquians in Purrlin

			#Katsilbershirts
			SIL = { every_owned_state = { set_variable = { species = 1 } } }
			653 = { set_variable = { minority = 11 } } #The Diasporat

			#Clermeowth
           	CLE = { every_owned_state = { set_variable = { species = 1 } } }
			583 = { set_variable = { minority = 11 } } #The Diasporat
			66 = { set_variable = { minority = 11 } } #The Diasporat

           	PAW = { every_owned_state = { set_variable = { species = 1 } } }
           	FRA = { every_owned_state = { set_variable = { species = 1 } } }
           	SOB = { every_owned_state = { set_variable = { species = 1 } } }
           	HYP = { every_owned_state = { set_variable = { species = 1 } } }
           	NEU = { every_owned_state = { set_variable = { species = 1 } } }

			#Navy Remnants
           	NAV = { every_owned_state = { set_variable = { species = 1 } } }
			32 = { set_variable = { minority = 4 } }

           	TAI = { every_owned_state = { set_variable = { species = 1 } } }
           	NKB = { every_owned_state = { set_variable = { species = 1 } } }
           	ELO = { every_owned_state = { set_variable = { species = 1 } } }
           	AUR = { every_owned_state = { set_variable = { species = 1 } } }
           	OST = { every_owned_state = { set_variable = { species = 1 } } }
			87 = { set_variable = { minority = 9 } } #Macaquians in Los Kibbles

           	WPR = { every_owned_state = { set_variable = { species = 1 } } }
           	CAT = { every_owned_state = { set_variable = { species = 1 } } }
           	LIO = { every_owned_state = { set_variable = { species = 1 } } }
           	MEW = { every_owned_state = { set_variable = { species = 1 } } }
           	STR = { every_owned_state = { set_variable = { species = 1 } } }
           	MEO = { every_owned_state = { set_variable = { species = 1 } } }
			595 = { set_variable = { minority = 7 } }
			197 = { set_variable = { minority = 7 } }
			593 = { set_variable = { minority = 3 } }
			594 = { set_variable = { minority = 3 } }

			#Quarries
           	PTQ = { every_owned_state = { set_variable = { species = 1 } } }
			37 = { set_variable = { minority = 4 } }
			54 = { set_variable = { minority = 4 } }
			566 = { set_variable = { minority = 4 } }
			567 = { set_variable = { minority = 4 } }
			568 = { set_variable = { minority = 4 } }

			#Frontier
           	IMF = { every_owned_state = { set_variable = { species = 1 } } }
           	IMF = { every_owned_state = { set_variable = { minority = 4 } } }

           	KPK = { every_owned_state = { set_variable = { species = 1 } } }
           	MEC = { every_owned_state = { set_variable = { species = 1 } } }
           	HIM = { every_owned_state = { set_variable = { species = 1 } } }

			#Pawldrin Island
			PLI = { every_owned_state = { set_variable = { species = 1 } } }

			#Sobakiland
			SOB = { every_owned_state = { set_variable = { species = 2 } } }
			471 = { set_variable = { species = 1 } }
			478 = { set_variable = { species = 1 } }
			626 = { set_variable = { species = 1 } }
			630 = { set_variable = { species = 1 } }
			471 = { set_variable = { minority = 2 } }
			478 = { set_variable = { minority = 2 } }
			626 = { set_variable = { minority = 2 } }
			630 = { set_variable = { minority = 2 } }

			476 = { set_variable = { minority = 1 } }
			472 = { set_variable = { minority = 1 } }
			28 = { set_variable = { minority = 1 } }
			483 = { set_variable = { minority = 1 } }
			629 = { set_variable = { minority = 1 } }
			632 = { set_variable = { minority = 1 } }
			631 = { set_variable = { minority = 1 } }
			642 = { set_variable = { minority = 1 } }
			643 = { set_variable = { minority = 1 } }
			472 = { set_variable = { minority = 1 } }
			490 = { set_variable = { minority = 1 } }
			473 = { set_variable = { minority = 1 } }

			#Meorseilles
			85 = { set_variable = { minority = 9 } }
			644 = { set_variable = { minority = 9 } }

			#Zuspris
			ZUS = { every_owned_state = { set_variable = { species = 4 } } }
			621 = { set_variable = { minority = 1 } }
			620 = { set_variable = { minority = 1 } }

			#Nekeox
			NKC = { every_owned_state = { set_variable = { species = 5 } } }
		
			#Nitromethane
			NMI = { every_owned_state = { set_variable = { species = 8 } } }
			NMI = { every_owned_state = { set_variable = { minority = 1 } } }

			#Wacegia
			WAC = { every_owned_state = { set_variable = { species = 6 } } }
			WAC = { every_owned_state = { set_variable = { minority = 1 } } }
			#They have Kronks
			619 = { set_variable = { minority = 7 } }
			618 = { set_variable = { minority = 7 } }
			124 = { set_variable = { minority = 7 } }
			123 = { set_variable = { species = 7 } }
			617 = { set_variable = { species = 7 } }
			123 = { set_variable = { minority = 6 } }
			617 = { set_variable = { minority = 6 } }
			#And some Brambles (fear)
			561 = { set_variable = { minority = 10 } }

			every_possible_country = {
				add_dynamic_modifier = { modifier = lok_wonder_modifier }
				if = {
					limit = { is_herzlands_warlord = yes }
					add_dynamic_modifier = { modifier = LOK_KSK_IPF_activity }
					#Initialize KSK/IPF
					if = {
						limit = { has_government = fascism }
						set_variable = { ipf_opinion = -4 }
						set_variable = { ipf_strength = 4 }
						set_variable = { ksk_opinion = -4 }
						set_variable = { ksk_strength = 4 }
					}
					if = {
						limit = { has_government = neutrality }
						set_variable = { ipf_opinion = -4 }
						set_variable = { ipf_strength = 4 }
						set_variable = { ksk_opinion = 0 }
						set_variable = { ksk_strength = 1 }
					}
					if = {
						limit = { has_government = democratic }
						set_variable = { ipf_opinion = 2 }
						set_variable = { ipf_strength = 2 }
						set_variable = { ksk_opinion = -2 }
						set_variable = { ksk_strength = 2 }
					}
					if = {
						limit = { has_government = communism }
						set_variable = { ipf_opinion = -2 }
						set_variable = { ipf_strength = 2 }
						set_variable = { ksk_opinion = 2 }
						set_variable = { ksk_strength = 2 }
					}
					AUR = {
						set_variable = { ipf_opinion = -5 }
						set_variable = { ipf_strength = 6 }
						set_variable = { ksk_opinion = -5 }
						set_variable = { ksk_strength = 6 }
					}
					SIL = {
						set_variable = { ipf_opinion = -4 }
						set_variable = { ipf_strength = 1 }
						set_variable = { ksk_opinion = -4 }
						set_variable = { ksk_strength = 2 }
					}
					CLE = {
						set_variable = { ipf_opinion = -3 }
						set_variable = { ipf_strength = 1 }
						set_variable = { ksk_opinion = -3 }
						set_variable = { ksk_strength = 0 }
					}
					PRL = {
						set_variable = { ksk_opinion = -3 }
						set_variable = { ksk_strength = 2 }
					}
					CAT = {
						set_variable = { ksk_opinion = -3 }
						set_variable = { ksk_strength = 2 }
					}
					PTQ = {
						set_variable = { ksk_opinion = -3 }
						set_variable = { ksk_strength = 3 }
					}
					STR = {
						set_variable = { ksk_opinion = 0 }
						set_variable = { ksk_strength = 1 }
					}
					IMF = {
						set_variable = { ipf_opinion = -1 }
						set_variable = { ipf_strength = 1 }
						set_variable = { ksk_opinion = 0 }
						set_variable = { ksk_strength = 0 }
					}
					MEW = {
						set_variable = { ksk_opinion = 4 }
						set_variable = { ksk_strength = 4 }
						set_variable = { ipf_opinion = -2 }
						set_variable = { ipf_strength = 1 }
					}
					ELO = {
						set_variable = { ksk_opinion = 0 }
						set_variable = { ksk_strength = 1 }
						set_variable = { ipf_opinion = 4 }
						set_variable = { ipf_strength = 4 }
					}
					calculate_ipf_ksk_resistance = yes
					for_each_scope_loop = {
						array = global.herzlands_states_array
						break = break
						set_state_flag = compliance_80_@PREV
						add_to_array = { array = PREV.potential_cores_array } #All the states that this nation can potentially core
					}
				}
			
				#Where are Katlinin and Meowrius?
				random_country = {
					limit = {
						is_herzlands_warlord = yes
						NOT = { tag = SIL tag = AUR }
						check_variable = { ipf_strength > 0 }
					}
					save_global_event_target_as = meowrius_country
				}

				random_country = {
					limit = {
						is_herzlands_warlord = yes
						NOT = { tag = SIL tag = AUR }
						check_variable = { ksk_strength > 0 }
					}
					save_global_event_target_as = katlinin_country
				}

				#Country species
				if = {
					limit = { is_herzlands_warlord = yes }
					set_variable = { country_species_1 = 1 } #Primary species
				}
				every_owned_state = { apply_state_species_modifier = yes } #Species modifiers
				apply_wonder_effects = yes #Wonders!
				calculate_strategic_resource_modifiers = yes #Strategic Resources!

				#Food tech to trick the AI into importing food
				if = {
					limit = { is_ai = yes }
					set_technology = { LOK_ai_food_tech = 1 }
				}
			}

			#Set up Herzlands uniter types
			PRL = { set_country_flag = herzlands_warlord_uniter }
			AUR = { set_country_flag = herzlands_warlord_hegemon }
			ELO = { set_country_flag = herzlands_warlord_stabilizer }
			CLE = { set_country_flag = herzlands_warlord_uniter }
			SIL = { set_country_flag = herzlands_warlord_hegemon }
			PAW = { set_country_flag = herzlands_warlord_regionalist }
			HYP = { set_country_flag = herzlands_warlord_regionalist }
			NEU = { set_country_flag = herzlands_warlord_hegemon }
			FRA = { set_country_flag = herzlands_warlord_regionalist }
			NKB = { set_country_flag = herzlands_warlord_independentist }
			OST = { set_country_flag = herzlands_warlord_uniter }
			TAI = { set_country_flag = herzlands_warlord_independentist }
			WPR = { set_country_flag = herzlands_warlord_independentist }
			MEW = { set_country_flag = herzlands_warlord_hegemon }
			STR = { set_country_flag = herzlands_warlord_independentist }
			LIO = { set_country_flag = herzlands_warlord_regionalist }
			CAT = { set_country_flag = herzlands_warlord_independentist }
			MEO = { set_country_flag = herzlands_warlord_independentist }
			HIM = { set_country_flag = herzlands_warlord_stabilizer }
			IMF = { set_country_flag = herzlands_warlord_independentist }
			PLI = { set_country_flag = herzlands_warlord_independentist }
			NAV = { set_country_flag = herzlands_warlord_stabilizer }
			MEC = { set_country_flag = herzlands_warlord_independentist }
			PTQ = { set_country_flag = herzlands_warlord_independentist }
			KPK = { set_country_flag = herzlands_warlord_independentist }
			KTW = { set_country_flag = herzlands_warlord_uniter }
			KKH = { set_country_flag = herzlands_warlord_uniter }
			KVK = { set_country_flag = herzlands_warlord_regionalist }
			BLM = { set_country_flag = herzlands_warlord_independentist }
			AKR = { set_country_flag = herzlands_warlord_independentist }
			KTV = { set_country_flag = herzlands_warlord_uniter }
			PMB = { set_country_flag = herzlands_warlord_independentist }

			TKW = { set_country_flag = herzlands_warlord_uniter }


			count_nukes_in_stockpile = yes
			calculate_salvo_capacity = yes
			set_variable = { lok_current_salvo_capacity = 0 }
        }
	}
	
	on_weekly = {
		effect = {
			#Strategic Resources
			calculate_strategic_resource_modifiers = yes
			
			#SPACE DEGRADATION
			attrition_space_rockets = yes
			calculate_muno_colonies_stats = yes
			damage_muno_colonies = yes
			calculate_orbital_logistics_capacity = yes

			if = { #Make sure to apply the food modifier if it's not there for some reason
				limit = { NOT = { has_dynamic_modifier = { modifier = LOK_food_consumption_modifier } } }
				add_dynamic_modifier = { modifier = LOK_food_consumption_modifier }
			}
			apply_wonder_effects = yes #Wonders!
			calculate_stab_ws_hit_from_noncore = yes #Effect of noncore states
			calculate_combat_casualties = yes #Casualties in states
			calculate_total_food_consumption = yes #Food effects
			if = {
				limit = { NOT = { has_country_flag = game_start_food_stockpile_refill_done } }
				set_variable = { country_food_stockpile = country_food_stockpile_max }
				set_country_flag = game_start_food_stockpile_refill_done
			}
			every_controlled_state = {
				calculate_radiation_in_state = yes #First calculate the radiation spread/fallout
				calculate_radiation_state_modifiers = yes #Then recalc the modifiers
				apply_radiation_effects = yes #Finally, apply casualties
				#Round the final displays
				set_variable = { lok_state_deaths_display = lok_state_deaths }
				round_variable = lok_state_deaths_display

				set_variable = { lok_state_combat_deaths_display = lok_state_combat_deaths }
				round_variable = lok_state_combat_deaths_display

				set_variable = { lok_state_radiation_deaths_display = lok_state_radiation_deaths }
				round_variable = lok_state_radiation_deaths_display

				set_variable = { lok_state_bombing_deaths_display = lok_state_bombing_deaths }
				round_variable = lok_state_bombing_deaths_display

				set_variable = { lok_state_starvation_deaths_display = lok_state_starvation_deaths }
				round_variable = lok_state_starvation_deaths_display

				if = { #State got so depopulated that it just collapses
					limit = { check_variable = { state_population_k < lok_min_manpower_before_collapse } }
					collapse_into_anarchy = yes
					set_variable = { lok_min_manpower_before_collapse = 0 }
				}
			}

			# #Round the final displays for country
			# set_variable = { lok_country_deaths_display = lok_country_deaths }
			# round_variable = lok_country_deaths_display

			# set_variable = { lok_country_radiation_deaths_display = lok_country_radiation_deaths }
			# round_variable = lok_country_radiation_deaths_display

			# set_variable = { lok_country_combat_deaths_display = lok_country_combat_deaths }
			# round_variable = lok_country_combat_deaths_display

			# set_variable = { lok_country_bombing_deaths_display = lok_country_bombing_deaths }
			# round_variable = lok_country_bombing_deaths_display

			# set_variable = { lok_country_starvation_deaths_display = lok_country_starvation_deaths }
			# round_variable = lok_country_starvation_deaths_display

			#Round the final displays for global
			set_variable = { global.lok_global_deaths_display = global.lok_global_deaths }
			divide_variable = { global.lok_global_deaths_display = 1000 } #Turn to millions

			set_variable = { global.lok_global_radiation_deaths_display = global.lok_global_radiation_deaths }
			divide_variable = { global.lok_global_radiation_deaths_display = 1000 } #Turn to millions

			set_variable = { global.lok_global_combat_deaths_display = global.lok_global_combat_deaths }
			divide_variable = { global.lok_global_combat_deaths = 1000 } #Turn to millions

			set_variable = { global.lok_global_bombing_deaths_display = global.lok_global_bombing_deaths }
			divide_variable = { global.lok_global_bombing_deaths_display = 1000 } #Turn to millions

			set_variable = { global.lok_global_starvation_deaths_display = global.lok_global_starvation_deaths }
			divide_variable = { global.lok_global_starvation_deaths_display = 1000 } #Turn to millions


			force_update_map_mode = { mapmode = LOK_radiation_map_mode }
			#force_update_map_mode = { mapmode = LOK_food_map_mode }

			#Checking if cores are met
			for_each_scope_loop = {
				array = potential_cores_array
				break = break
				if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_100_@ROOT }
					if = {
						limit = { check_variable = { compliance = 100 } }
						add_core_of = ROOT
					}
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_90_@ROOT }
					if = { limit = { check_variable = { compliance > 90 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_80_@ROOT }
					if = { limit = { check_variable = { compliance > 80 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_70_@ROOT }
					if = { limit = { check_variable = { compliance > 70 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_60_@ROOT }
					if = { limit = { check_variable = { compliance > 60 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_50_@ROOT }
					if = { limit = { check_variable = { compliance > 50 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_40_@ROOT }
					if = { limit = { check_variable = { compliance > 40 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_30_@ROOT }
					if = { limit = { check_variable = { compliance > 30 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_20_@ROOT }
					if = { limit = { check_variable = { compliance > 20 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_10_@ROOT }
					if = { limit = { check_variable = { compliance > 10 } } add_core_of = ROOT }
				}
				else_if = {
					limit = { NOT = { is_core_of = ROOT } has_state_flag = compliance_0_@ROOT }
					if = { limit = { check_variable = { compliance > 0 } } add_core_of = ROOT }
				}
			}

			if = {
				limit = {
					is_ai = yes
					has_war = yes
					has_tech = nukes
					check_variable = { lok_total_nuke_stockpile > 0 }
					any_enemy_country = { ROOT = { has_country_flag = nuked_by_@PREV } }
				}
				ai_fire_nuke = yes
			}

			#Salvo capacity
			calculate_salvo_capacity = yes
		}
	}

	on_state_control_changed = {
		effect = {
			#ELWIN COLLAPSE - PEACE OUT WHEN STATES ARE ACQUIRED
			if = {
				limit = { tag = KKH every_core_state = { is_fully_controlled_by = KKH } has_war_with = SIL }
				white_peace = SIL
				SIL = { every_owned_state = { limit = { is_core_of = KKH } transfer_state_to = KKH } add_to_variable = { elwin_lost_count = 1 } }
			}
			if = {
				limit = { tag = KVK every_core_state = { is_fully_controlled_by = KVK } has_war_with = SIL }
				white_peace = SIL
				SIL = { every_owned_state = { limit = { is_core_of = KVK } transfer_state_to = KVK } add_to_variable = { elwin_lost_count = 1 } }
			}
			if = {
				limit = { tag = CLE every_core_state = { is_fully_controlled_by = CLE } has_war_with = SIL }
				white_peace = SIL
				SIL = { every_owned_state = { limit = { is_core_of = CLE } transfer_state_to = CLE } add_to_variable = { elwin_lost_count = 1 } }
			}
			if = {
				limit = { tag = PAW every_core_state = { is_fully_controlled_by = PAW } has_war_with = SIL }
				white_peace = SIL
				SIL = { every_owned_state = { limit = { is_core_of = PAW } transfer_state_to = PAW } add_to_variable = { elwin_lost_count = 1 } }
			}
			if = {
				limit = { SIL = { check_variable = { elwin_lost_count = 4 } } }
				SIL = {
					every_controlled_state = {
						limit = { is_core_of = BLM }
						transfer_state_to = BLM
					}
					transfer_units_fraction = {
						target = BLM
						stockpile_ratio = 0.05
						army_ratio = 0.05
						navy_ratio = 0.05
						air_ratio = 0.05
					}
					every_controlled_state = {
						limit = { is_core_of = AKR }
						transfer_state_to = AKR
					}
					transfer_units_fraction = {
						target = AKR
						stockpile_ratio = 0.05
						army_ratio = 0.05
						navy_ratio = 0.05
						air_ratio = 0.05
					}
					SIL_Meowtin_Hessler = {
						set_nationality = AKR
						add_country_leader_role = {
							country_leader = {
								ideology = despotism
								expire = "1965.1.1.1"
							}
							promote_leader = yes
						}
					}
					every_controlled_state = {
						limit = { is_core_of = KTV }
						transfer_state_to = KTV
					}
					SIL_Hans = {
						set_nationality = KTV
						add_country_leader_role = {
							country_leader = {
								ideology = collectivism
								expire = "1965.1.1.1"
							}
							promote_leader = yes
						}
					}
					transfer_units_fraction = {
						target = KTV
						stockpile_ratio = 0.10
						army_ratio = 0.10
						navy_ratio = 0.10
						air_ratio = 0.10
					}
					every_controlled_state = {
						limit = { is_core_of = PMB }
						transfer_state_to = PMB
					}
					SIL_Ulrich_Blutstein = {
						set_nationality = PMB
						add_country_leader_role = {
							country_leader = {
								ideology = despotism
								expire = "1965.1.1.1"
							}
							promote_leader = yes
						}
					}
					transfer_units_fraction = {
						target = KTV
						stockpile_ratio = 0.075
						army_ratio = 0.075
						navy_ratio = 0.075
						air_ratio = 0.075
					}
				}
			}

			if = { #Count how many Herzlands state a Herzlands nation owns, update when territory changes.
				limit = { FROM.FROM = { is_in_array = { array = global.herzlands_states_array value = THIS } } }
				ROOT = { if = { limit = { is_herzlands_warlord = yes } add_to_variable = { current_herzlands_state_count = 1 } } }
				FROM = { if = { limit = { is_herzlands_warlord = yes } subtract_from_variable = { current_herzlands_state_count = 1 } } }
			}
			FROM = { 
				apply_wonder_effects = yes
				calculate_salvo_capacity = yes
				calculate_strategic_resource_modifiers = yes
			}
			ROOT = {
				apply_wonder_effects = yes
				calculate_salvo_capacity = yes
				calculate_strategic_resource_modifiers = yes
			}
			FROM.FROM = { #Clear and apply species match modifiers
				if = {
					limit = { has_dynamic_modifier = { modifier = lok_matching_species } }
					remove_dynamic_modifier = { modifier = lok_matching_species }
				}
				if = {
					limit = { has_dynamic_modifier = { modifier = lok_matching_minority } }
					remove_dynamic_modifier = { modifier = lok_matching_minority }
				}
				if = { #Matching species = compliance buff
					limit = { check_variable = { species = ROOT.country_species_1 } }
					add_dynamic_modifier = { modifier = lok_matching_species }
				}
				if = { #Matching minority = compliance buff
					limit = { check_variable = { minority = ROOT.country_species_1 } }
					add_dynamic_modifier = { modifier = lok_matching_minority }
				}
			}
			if = {
				limit = {
					ROOT = { tag = AUR }
					FROM.FROM = { state = 173 }
				}
				ROOT = { country_event = { id = AUR_event.13 days = 30 } }
			}
		}
	}

	on_monthly = {
		effect = {
			force_update_map_mode = { mapmode = LOK_species_map_mode }
			calculate_ipf_ksk_resistance = yes
			if = {
				limit = { check_variable = { ipf_strength > 0 } check_variable = { ipf_opinion < 0 } }
				activate_mission = ipf_bad_action
			}
			if = {
				limit = { check_variable = { ksk_strength > 0 } check_variable = { ksk_opinion < 0 } }
				activate_mission = ksk_bad_action
			}
			if = {
				limit = { check_variable = { ipf_strength > 0 } check_variable = { ipf_opinion > 0 } }
				activate_mission = ipf_good_action
			}
			if = {
				limit = { check_variable = { ksk_strength > 0 } check_variable = { ksk_opinion > 0 } }
				activate_mission = ksk_good_action
			}
			if = {
				limit = { is_ai = yes has_tech = nukes }
				calculate_ai_nuke_production = yes #script that gives nukes to the AI based on their military factory count (and reduces their mil count)
			}

			#Katlinin and Meowrius go on an adventure. Every months they can just move somewhere else to run their operations.
			random = {
				chance = 50
				random_country = {
					limit = {
						is_herzlands_warlord = yes
						check_variable = { ipf_strength > 0 }
					}
					save_global_event_target_as = meowrius_country
				}
			}

			random = {
				chance = 50
				random_country = {
					limit = {
						is_herzlands_warlord = yes
						check_variable = { ksk_strength > 0 }
					}
					save_global_event_target_as = katlinin_country
				}
			}
		}
	}

	on_daily = {
		effect = {
			calculate_bonus_resources_from_modifiers = yes
			count_nukes_in_stockpile = yes

			if = { #DEBUG NUCLEAR WAR MODE - NATIONS WILL RANDOMLY FIRE NUKES AT THE STATES OF THEIR ENEMIES!
				limit = { has_global_flag = lok_nuclear_war_mode_on }
				random_state = {
					limit = { var:controller = { has_war_with = ROOT } }
					random = {
						chance = 50
						save_global_event_target_as = lok_thermonuclear_salvo_state
						ROOT = { fire_thermonuclear_salvo = yes }
					}
				}
			}
		}
	}

	on_subject_free = {
		effect = {
			if = {
				limit = { original_tag = CLE }
				drop_cosmetic_tag = yes
			}
			if = {
				limit = { original_tag = PAW }
				drop_cosmetic_tag = yes
			}
		}
	}

	on_nuke_drop = {
		effect = {
			#Nukes take away 5% of a state's population. Calculate it and remove, then add to the total counters
			# FROM = {
			# 	set_variable = { lok_added_radiation_level = 1 }
			# 	multiply_variable = { lok_added_radiation_level = ROOT.modifier@lok_nuke_radiation_factor } #take the modifier into account
			# 	add_to_variable = { lok_radiation_level = lok_added_radiation_level } #Radiation level
			# 	divide_variable = { lok_added_radiation_level = 4 }
			# 	calculate_radiation_state_modifiers = yes
			# 	every_neighbor_state = { #It spreads to neighboring states too, how fun!
			# 		add_to_variable = { lok_radiation_level = PREV.lok_added_radiation_level }
			# 		calculate_radiation_state_modifiers = yes
			# 	}
			# 	if = {
			# 		limit = { state_population_k > 10 } #There'll always at least be like 10k bozos left
			# 		set_temp_variSable = { lok_nuke_casualties = state_population_k }
			# 		multiply_temp_variable = { lok_nuke_casualties = 0.005 } #We divide to avoid hitting the limit of the for_loop effect
			# 		round_temp_variable = lok_nuke_casualties
			# 		clamp_temp_variable = { var = lok_nuke_casualties min = 1 } #At least 10k people gotta die sowwy
			# 		for_loop_effect = {
			# 			end = lok_nuke_casualties
			# 			add_manpower = -10000
			# 		}
			# 		multiply_temp_variable = { lok_nuke_casualties = 10 } #Turn to thousands (if that's even possible)
			# 		set_variable = { lok_recent_nuke_casualties = lok_nuke_casualties }
			# 		#Add to the state counters
			# 		add_to_variable = { lok_state_bombing_deaths = lok_recent_nuke_casualties }
			# 		add_to_variable = { lok_state_deaths = lok_recent_nuke_casualties }
			# 		add_to_variable = { lok_state_deaths_display = lok_recent_nuke_casualties }
			# 		#Add these deaths to the controller's total and the grand total
			# 		CONTROLLER = {
			# 			add_to_variable = { lok_country_bombing_deaths = PREV.lok_recent_nuke_casualties }
			# 			add_to_variable = { lok_country_deaths = PREV.lok_recent_nuke_casualties }
			# 			add_to_variable = { global.lok_global_bombing_deaths = PREV.lok_recent_nuke_casualties }
			# 			add_to_variable = { global.lok_global_deaths = PREV.lok_recent_nuke_casualties }
			# 		}
			# 	}
			# }
			#Remember who nuked us!
			FROM = {
				var:controller = {
					if = { #So if SIL nuked SOB then SOB gets nuked_by_SIL and can rightfully retaliate against SIL.
						limit = { NOT = { has_country_flag = nuked_by_@ROOT } }
						set_country_flag = nuked_by_@ROOT
					}
				}
			}
			#Radiation mapmode
			force_update_map_mode = { mapmode = LOK_radiation_map_mode }
		}
	}

	on_capitulation_immediate = {
		effect = {
			if = { #USF state
				limit = { 
					OR = {
						FROM = { is_puppet_of = event_target:ussf_leader }
						tag = event_target:ussf_leader
					}
				}
				ROOT = { every_core_state = { transfer_state_to = event_target:ussf_leader } }
			}
		}
	}

	on_weekly_TAI = {
		effect = {
			if = {
				limit = { NOT = { has_focus_tree = CAT_KINGDOM_TREE } }
				TAI_calculate_monachist_militarist_effects = yes
			}
			else_if = {
				limit = { has_dynamic_modifier = { modifier = TAI_militarist_stability } }
				remove_dynamic_modifier = { modifier = TAI_militarist_stability }
				remove_dynamic_modifier = { modifier = TAI_monarchist_stability }
			}
		}
	}

	on_weekly_AUR = {
		effect = {
			if = {
				limit = { NOT = { has_country_flag = failed_dreijahrige } }
				if = {
					limit = {
						has_completed_focus = AUR_dreijahrige
						NOT = { has_completed_focus = AUR_pushing_pushing }
					}
					#See the new infra/reactors built
					set_variable = { aur_num_new_infra_built = 0 }
					set_variable = { aur_num_new_reactors_built = 0 }
					every_owned_state = {
						add_to_variable = { AUR.aur_num_new_infra_built = building_level@infrastructure }
						add_to_variable = { AUR.aur_num_new_reactors_built = building_level@nuclear_reactor }
					}
					subtract_from_variable = { aur_num_new_infra_built = aur_num_infra_built }
					subtract_from_variable = { aur_num_new_reactors_built = aur_num_reactors_built }
				}
				else_if = {
					limit = {
						has_completed_focus = AUR_pushing_pushing
						NOT = { has_completed_focus = AUR_nearly_there }
					}
					#See the new infra/reactors built
					set_variable = { aur_num_new_mils_built = 0 }
					set_variable = { aur_num_new_civs_built = 0 }
					every_owned_state = {
						add_to_variable = { AUR.aur_num_new_mils_built = building_level@arms_factory }
						add_to_variable = { AUR.aur_num_new_civs_built = building_level@industrial_complex }
					}
					subtract_from_variable = { aur_num_new_mils_built = aur_num_mils_built }
					subtract_from_variable = { aur_num_new_civs_built = aur_num_civs_built }
				}
				else_if = {
					limit = {
						has_completed_focus = AUR_nearly_there
						NOT = { has_completed_focus = AUR_fulfilled }
					}
					#See the new infra/reactors built
					set_variable = { aur_num_new_aa_built = 0 }
					set_variable = { aur_num_new_radar_built = 0 }
					every_owned_state = {
						add_to_variable = { AUR.aur_num_new_aa_built = building_level@anti_air_building }
						add_to_variable = { AUR.aur_num_new_radar_built = building_level@radar_station }
					}
					subtract_from_variable = { aur_num_new_aa_built = aur_num_aa_built }
					subtract_from_variable = { aur_num_new_radar_built = aur_num_radar_built }
				}
			}
		}
	}
}